from pydantic import Field, validator

from .base_models import BaseAttributes, BaseGroup

REQUIRED_ATTRIBUTES = dict(
    Conventions='CF-1.7, SONAR-netCDF4-1.0, ACDD-1.3',
    sonar_convention_authority='ICES',
    sonar_convention_name='SONAR-netCDF4',
    sonar_convention_version='1.0'
)

class Attributes(BaseAttributes):
    Conventions: str = Field(description="""A comma-separated list of the conventions followed in the file. Include the SONAR-netCDF4 convention and version (e.g. "SONAR-netCDF4-1.0") and the relevant CF and ACDD conventions (e.g. "CF-1.7" and "ACDD-1.3").""")
    date_created: str = Field(description="""Timestamp of file creation in ISO8601:2004 extended format, including the time zone (e.g. 2017-05-06T20:21:35Z).""")
    keywords: str = Field(description="""A comma-separated list of key words and/or phrases. For direct sonar-generated files, this should at least include the type of sonar.""")
    license: str = Field(None, description="""Either enter the URL to a standard or specific license, enter “Freely distributed” or “None”, or describe any restrictions to data access and distribution in free text.""")
    rights: str = Field(None, description="""Description of the usage rights of data in the file.""")
    sonar_convention_authority: str = Field(description="""Name of the organization managing and distributing the SONAR-netCDF4 convention. Currently ICES.""")
    sonar_convention_name: str = Field(description="""Formal name of this convention (i.e. "SONAR-netCDF4").""")
    sonar_convention_version: str = Field(description="""SONAR-netCDF4 version number in the form "major.minor", where major and minor are non-negative integers.""")
    summary: str = Field(description="""A paragraph describing the dataset, analogous to an abstract for a paper. For direct sonar-generated files, this can be blank.""")
    title: str = Field(description="""A short phrase or sentence describing the dataset. For direct sonar-generated files, this can be as simple as "Files generated by the XYZ sonar".""")

    @validator('Conventions')
    def Conventions_default(cls, v):
        if v != REQUIRED_ATTRIBUTES['Conventions']:
            raise ValueError(f"must be '{REQUIRED_ATTRIBUTES['Conventions']}'")
        return v

    @validator('sonar_convention_authority')
    def sonar_convention_authority_default(cls, v):
        if v != REQUIRED_ATTRIBUTES['sonar_convention_authority']:
            raise ValueError(f"must be '{REQUIRED_ATTRIBUTES['sonar_convention_authority']}'")
        return v

    @validator('sonar_convention_name')
    def sonar_convention_name_default(cls, v):
        if v != REQUIRED_ATTRIBUTES['sonar_convention_name']:
            raise ValueError(f"must be '{REQUIRED_ATTRIBUTES['sonar_convention_name']}'")
        return v

    @validator('sonar_convention_version')
    def sonar_convention_version_default(cls, v):
        if v != REQUIRED_ATTRIBUTES['sonar_convention_version']:
            raise ValueError(f"must be '{REQUIRED_ATTRIBUTES['sonar_convention_version']}'")
        return v

class Toplevel(BaseGroup):
    attributes: Attributes = Field(..., **REQUIRED_ATTRIBUTES)